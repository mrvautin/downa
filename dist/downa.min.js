var downa=function(n){var e={};function r(t){if(e[t])return e[t].exports;var o=e[t]={i:t,l:!1,exports:{}};return n[t].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=n,r.c=e,r.d=function(n,e,t){r.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:t})},r.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},r.t=function(n,e){if(1&e&&(n=r(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var t=Object.create(null);if(r.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var o in n)r.d(t,o,function(e){return n[e]}.bind(null,o));return t},r.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return r.d(e,"a",e),e},r.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},r.p="",r(r.s="./index.js")}({"./index.js":function(module,exports){eval("const cleanLinesRe = /^\\s*/gm;\nconst headersRe = /(#+)(.*)/gmi;\nconst imagesRe = /!\\[([^[]+)\\]\\(([^)]+)\\)/gmi;\nconst linksRe = /\\[([^[]+)\\]\\(([^)]+)\\)/gmi;\nconst boldRe = /(\\*\\*|__)(.*?)\\1/gmi;\nconst emphasisRe = /(\\*|_)(.*?)\\1/gmi;\nconst delRe = /~~(.*?)~~/gmi;\nconst quoteRe = /:\"(.*?)\":/gmi;\nconst blockCodeRe = /```([^```]+)```/gmi;\nconst inlineCodeRe = /`([^`]+)`/gmi;\nconst ulListsRe = /\\*+(.*)?/gmi;\nconst olListsRe = /[0-9]+\\.(.*)/gmi;\nconst hrRe = /\\n-{5,}/gmi;\nconst blockQuoteRe = /\\n(&gt;|>)(.*)/gmi;\nconst paragraphsRe = /\\n([^\\n]+)\\n/gmi;\nconst paragraphsIgnoreRe = /^<\\/?(ul|ol|li|h|p|bl|code|table|tr|td)/i;\nconst fixUlRe = /<\\/ul>\\s?<ul>/gmi;\nconst fixOlRe = /<\\/ol>\\s<ol>/gmi;\nconst fixBlockQuoteRe = /<\\/blockquote>\\s?<blockquote>/gmi;\n\nconst rules = {\n    cleanLines: {\n        regex: cleanLinesRe,\n        replacer: function(){\n            return '';\n        }\n    },\n    headers: {\n        regex: headersRe,\n        replacer: function(match, $1, $2){\n            const h = $1.trim().length;\n            return `<h${h}>${$2.trim()}</h${h}>`;\n        }\n    },\n    images: {\n        regex: imagesRe,\n        replacer: function(match, $1, $2){\n            return `<img src=\"${$2}\" alt=\"${$1}\">`;\n        }\n    },\n    links: {\n        regex: linksRe,\n        replacer: function(match, $1, $2){\n            return `<a href=\"${$2}\">${$1}</a>`;\n        }\n    },\n    bold: {\n        regex: boldRe,\n        replacer: function(match, $1, $2){\n            return `<strong>${$2}</strong>`;\n        }\n    },\n    emphasis: {\n        regex: emphasisRe,\n        replacer: function(match, $1, $2){\n            return `<em>${$2}</em>`;\n        }\n    },\n    del: {\n        regex: delRe,\n        replacer: function(match, $1, $2){\n            return `<del>${$1}</del>`;\n        }\n    },\n    quote: {\n        regex: quoteRe,\n        replacer: function(match, $1, $2){\n            return `<q>${$1}</q>`;\n        }\n    },\n    blockCode: {\n        regex: blockCodeRe,\n        replacer: function(match, $1, $2){\n            return `<pre><code>${$1}</code></pre>`;\n        }\n    },\n    inlineCode: {\n        regex: inlineCodeRe,\n        replacer: function(match, $1, $2){\n            return `<code>${$1}</code>`;\n        }\n    },\n    ulLists: {\n        regex: ulListsRe,\n        replacer: function(match, $1, $2){\n            return `<ul><li>${$1.trim()}</li></ul>`;\n        }\n    },\n    olLists: {\n        regex: olListsRe,\n        replacer: function(match, $1, $2){\n            return `<ol><li>${$1.trim()}</li></ol>`;\n        }\n    },\n    hr: {\n        regex: hrRe,\n        replacer: function(){\n            return '<hr />';\n        }\n    },\n    blockQuote: {\n        regex: blockQuoteRe,\n        replacer: function($match, $1, $2){\n            return `\\n<blockquote>${$2}</blockquote>`;\n        }\n    },\n    paragraphs: {\n        regex: paragraphsRe,\n        replacer: function($match, $1){\n            let trimmed = $1.trim();\n            if(paragraphsIgnoreRe.test(trimmed)){\n                return `\\n${trimmed}\\n`;\n            }\n            return `\\n<p>${trimmed}</p>\\n`;\n        }\n    },\n    fixUl: {\n        regex: fixUlRe,\n        replacer: function($match, $1){\n            return '';\n        }\n    },\n    fixOl: {\n        regex: fixOlRe,\n        replacer: function($match, $1){\n            return '';\n        }\n    },\n    fixBlockquote: {\n        regex: fixBlockQuoteRe,\n        replacer: function($match, $1){\n            return '';\n        }\n    }\n};\n/**\n * @param  {String} markdown A string of Markdown content\n * @returns {String} A HTML formatted string\n */\nfunction render(markdown){\n    Object.keys(rules).forEach((key) => {\n        markdown = markdown.replace(rules[key].regex, rules[key].replacer);\n    });\n    return markdown.trim();\n};\n\nmodule.exports = {\n    render\n};\n\n\n//# sourceURL=webpack://downa/./index.js?")}});